{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "5a91fbf9",
   "metadata": {
    "_cell_guid": "b1076dfc-b9ad-4769-8c92-a6c4dae69d19",
    "_uuid": "8f2839f25d086af736a60e9eeb907d3b93b6e0e5",
    "execution": {
     "iopub.execute_input": "2025-03-17T23:21:46.721588Z",
     "iopub.status.busy": "2025-03-17T23:21:46.721233Z",
     "iopub.status.idle": "2025-03-17T23:21:47.733335Z",
     "shell.execute_reply": "2025-03-17T23:21:47.732067Z"
    },
    "papermill": {
     "duration": 1.022292,
     "end_time": "2025-03-17T23:21:47.735328",
     "exception": false,
     "start_time": "2025-03-17T23:21:46.713036",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "/kaggle/input/drugs/drug200.csv\n",
      "/kaggle/input/drugs-a-b-c-x-y-for-decision-trees/drug200.csv\n"
     ]
    }
   ],
   "source": [
    "# This Python 3 environment comes with many helpful analytics libraries installed\n",
    "# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n",
    "# For example, here's several helpful packages to load\n",
    "\n",
    "import numpy as np # linear algebra\n",
    "import pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n",
    "\n",
    "# Input data files are available in the read-only \"../input/\" directory\n",
    "# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n",
    "\n",
    "import os\n",
    "for dirname, _, filenames in os.walk('/kaggle/input'):\n",
    "    for filename in filenames:\n",
    "        print(os.path.join(dirname, filename))\n",
    "\n",
    "# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n",
    "# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "a589a62a",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-03-17T23:21:47.746601Z",
     "iopub.status.busy": "2025-03-17T23:21:47.746079Z",
     "iopub.status.idle": "2025-03-17T23:21:47.762505Z",
     "shell.execute_reply": "2025-03-17T23:21:47.761428Z"
    },
    "papermill": {
     "duration": 0.024086,
     "end_time": "2025-03-17T23:21:47.764396",
     "exception": false,
     "start_time": "2025-03-17T23:21:47.740310",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "df = pd.read_csv(\"/kaggle/input/drugs-a-b-c-x-y-for-decision-trees/drug200.csv\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "254c0019",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-03-17T23:21:47.774873Z",
     "iopub.status.busy": "2025-03-17T23:21:47.774478Z",
     "iopub.status.idle": "2025-03-17T23:21:47.802831Z",
     "shell.execute_reply": "2025-03-17T23:21:47.801702Z"
    },
    "papermill": {
     "duration": 0.035459,
     "end_time": "2025-03-17T23:21:47.804609",
     "exception": false,
     "start_time": "2025-03-17T23:21:47.769150",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Age</th>\n",
       "      <th>Sex</th>\n",
       "      <th>BP</th>\n",
       "      <th>Cholesterol</th>\n",
       "      <th>Na_to_K</th>\n",
       "      <th>Drug</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>23</td>\n",
       "      <td>F</td>\n",
       "      <td>HIGH</td>\n",
       "      <td>HIGH</td>\n",
       "      <td>25.355</td>\n",
       "      <td>drugY</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>47</td>\n",
       "      <td>M</td>\n",
       "      <td>LOW</td>\n",
       "      <td>HIGH</td>\n",
       "      <td>13.093</td>\n",
       "      <td>drugC</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>47</td>\n",
       "      <td>M</td>\n",
       "      <td>LOW</td>\n",
       "      <td>HIGH</td>\n",
       "      <td>10.114</td>\n",
       "      <td>drugC</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>28</td>\n",
       "      <td>F</td>\n",
       "      <td>NORMAL</td>\n",
       "      <td>HIGH</td>\n",
       "      <td>7.798</td>\n",
       "      <td>drugX</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>61</td>\n",
       "      <td>F</td>\n",
       "      <td>LOW</td>\n",
       "      <td>HIGH</td>\n",
       "      <td>18.043</td>\n",
       "      <td>drugY</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   Age Sex      BP Cholesterol  Na_to_K   Drug\n",
       "0   23   F    HIGH        HIGH   25.355  drugY\n",
       "1   47   M     LOW        HIGH   13.093  drugC\n",
       "2   47   M     LOW        HIGH   10.114  drugC\n",
       "3   28   F  NORMAL        HIGH    7.798  drugX\n",
       "4   61   F     LOW        HIGH   18.043  drugY"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "179af63d",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-03-17T23:21:47.816266Z",
     "iopub.status.busy": "2025-03-17T23:21:47.815748Z",
     "iopub.status.idle": "2025-03-17T23:21:49.740159Z",
     "shell.execute_reply": "2025-03-17T23:21:49.739150Z"
    },
    "papermill": {
     "duration": 1.932194,
     "end_time": "2025-03-17T23:21:49.742101",
     "exception": false,
     "start_time": "2025-03-17T23:21:47.809907",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "from sklearn import tree"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "787ddafb",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-03-17T23:21:49.753301Z",
     "iopub.status.busy": "2025-03-17T23:21:49.752800Z",
     "iopub.status.idle": "2025-03-17T23:21:49.763514Z",
     "shell.execute_reply": "2025-03-17T23:21:49.762393Z"
    },
    "papermill": {
     "duration": 0.018222,
     "end_time": "2025-03-17T23:21:49.765229",
     "exception": false,
     "start_time": "2025-03-17T23:21:49.747007",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Age            0\n",
       "Sex            0\n",
       "BP             0\n",
       "Cholesterol    0\n",
       "Na_to_K        0\n",
       "Drug           0\n",
       "dtype: int64"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.isna().sum()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "f8908a7a",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-03-17T23:21:49.776343Z",
     "iopub.status.busy": "2025-03-17T23:21:49.775906Z",
     "iopub.status.idle": "2025-03-17T23:21:49.782220Z",
     "shell.execute_reply": "2025-03-17T23:21:49.781089Z"
    },
    "papermill": {
     "duration": 0.01365,
     "end_time": "2025-03-17T23:21:49.783753",
     "exception": false,
     "start_time": "2025-03-17T23:21:49.770103",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "['Age', 'Sex', 'BP', 'Cholesterol', 'Na_to_K', 'Drug']"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "features = []\n",
    "for i in df.columns:\n",
    "    features.append(i)\n",
    "\n",
    "features"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "91f75220",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-03-17T23:21:49.795187Z",
     "iopub.status.busy": "2025-03-17T23:21:49.794781Z",
     "iopub.status.idle": "2025-03-17T23:21:49.818089Z",
     "shell.execute_reply": "2025-03-17T23:21:49.816906Z"
    },
    "papermill": {
     "duration": 0.031238,
     "end_time": "2025-03-17T23:21:49.820134",
     "exception": false,
     "start_time": "2025-03-17T23:21:49.788896",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "df_encoded = pd.get_dummies(df[['Age', 'Sex', 'BP', 'Cholesterol', 'Na_to_K']],dtype=int)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "67eb0cff",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-03-17T23:21:49.832126Z",
     "iopub.status.busy": "2025-03-17T23:21:49.831635Z",
     "iopub.status.idle": "2025-03-17T23:21:49.837318Z",
     "shell.execute_reply": "2025-03-17T23:21:49.836154Z"
    },
    "papermill": {
     "duration": 0.013946,
     "end_time": "2025-03-17T23:21:49.839194",
     "exception": false,
     "start_time": "2025-03-17T23:21:49.825248",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "df_encoded['Drug']= df['Drug']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "11e306ef",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-03-17T23:21:49.850993Z",
     "iopub.status.busy": "2025-03-17T23:21:49.850550Z",
     "iopub.status.idle": "2025-03-17T23:21:49.863236Z",
     "shell.execute_reply": "2025-03-17T23:21:49.862087Z"
    },
    "papermill": {
     "duration": 0.020506,
     "end_time": "2025-03-17T23:21:49.865087",
     "exception": false,
     "start_time": "2025-03-17T23:21:49.844581",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Age</th>\n",
       "      <th>Na_to_K</th>\n",
       "      <th>Sex_F</th>\n",
       "      <th>Sex_M</th>\n",
       "      <th>BP_HIGH</th>\n",
       "      <th>BP_LOW</th>\n",
       "      <th>BP_NORMAL</th>\n",
       "      <th>Cholesterol_HIGH</th>\n",
       "      <th>Cholesterol_NORMAL</th>\n",
       "      <th>Drug</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>23</td>\n",
       "      <td>25.355</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>drugY</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>47</td>\n",
       "      <td>13.093</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>drugC</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>47</td>\n",
       "      <td>10.114</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>drugC</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>28</td>\n",
       "      <td>7.798</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>drugX</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>61</td>\n",
       "      <td>18.043</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>drugY</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   Age  Na_to_K  Sex_F  Sex_M  BP_HIGH  BP_LOW  BP_NORMAL  Cholesterol_HIGH  \\\n",
       "0   23   25.355      1      0        1       0          0                 1   \n",
       "1   47   13.093      0      1        0       1          0                 1   \n",
       "2   47   10.114      0      1        0       1          0                 1   \n",
       "3   28    7.798      1      0        0       0          1                 1   \n",
       "4   61   18.043      1      0        0       1          0                 1   \n",
       "\n",
       "   Cholesterol_NORMAL   Drug  \n",
       "0                   0  drugY  \n",
       "1                   0  drugC  \n",
       "2                   0  drugC  \n",
       "3                   0  drugX  \n",
       "4                   0  drugY  "
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_encoded.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "0f595f23",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-03-17T23:21:49.877388Z",
     "iopub.status.busy": "2025-03-17T23:21:49.876979Z",
     "iopub.status.idle": "2025-03-17T23:21:49.887794Z",
     "shell.execute_reply": "2025-03-17T23:21:49.886765Z"
    },
    "papermill": {
     "duration": 0.018454,
     "end_time": "2025-03-17T23:21:49.889451",
     "exception": false,
     "start_time": "2025-03-17T23:21:49.870997",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/usr/local/lib/python3.10/dist-packages/numpy/core/fromnumeric.py:59: FutureWarning: 'DataFrame.swapaxes' is deprecated and will be removed in a future version. Please use 'DataFrame.transpose' instead.\n",
      "  return bound(*args, **kwds)\n"
     ]
    }
   ],
   "source": [
    "train,test,validation = np.split(df_encoded.sample(frac=1,random_state=42),[int(.6*len(df_encoded)),int(.8*len(df_encoded))])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "cd481b74",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-03-17T23:21:49.901428Z",
     "iopub.status.busy": "2025-03-17T23:21:49.901014Z",
     "iopub.status.idle": "2025-03-17T23:21:49.913501Z",
     "shell.execute_reply": "2025-03-17T23:21:49.912357Z"
    },
    "papermill": {
     "duration": 0.020388,
     "end_time": "2025-03-17T23:21:49.915323",
     "exception": false,
     "start_time": "2025-03-17T23:21:49.894935",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Age</th>\n",
       "      <th>Na_to_K</th>\n",
       "      <th>Sex_F</th>\n",
       "      <th>Sex_M</th>\n",
       "      <th>BP_HIGH</th>\n",
       "      <th>BP_LOW</th>\n",
       "      <th>BP_NORMAL</th>\n",
       "      <th>Cholesterol_HIGH</th>\n",
       "      <th>Cholesterol_NORMAL</th>\n",
       "      <th>Drug</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>95</th>\n",
       "      <td>36</td>\n",
       "      <td>11.424</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>drugX</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>15</th>\n",
       "      <td>16</td>\n",
       "      <td>15.516</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>drugY</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>30</th>\n",
       "      <td>18</td>\n",
       "      <td>8.750</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>drugX</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>158</th>\n",
       "      <td>59</td>\n",
       "      <td>10.444</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>drugC</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>128</th>\n",
       "      <td>47</td>\n",
       "      <td>33.542</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>drugY</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "     Age  Na_to_K  Sex_F  Sex_M  BP_HIGH  BP_LOW  BP_NORMAL  Cholesterol_HIGH  \\\n",
       "95    36   11.424      0      1        0       1          0                 0   \n",
       "15    16   15.516      1      0        1       0          0                 0   \n",
       "30    18    8.750      1      0        0       0          1                 0   \n",
       "158   59   10.444      1      0        0       1          0                 1   \n",
       "128   47   33.542      0      1        0       1          0                 0   \n",
       "\n",
       "     Cholesterol_NORMAL   Drug  \n",
       "95                    1  drugX  \n",
       "15                    1  drugY  \n",
       "30                    1  drugX  \n",
       "158                   0  drugC  \n",
       "128                   1  drugY  "
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "train.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "a3bd0f0a",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-03-17T23:21:49.927444Z",
     "iopub.status.busy": "2025-03-17T23:21:49.927032Z",
     "iopub.status.idle": "2025-03-17T23:21:49.939538Z",
     "shell.execute_reply": "2025-03-17T23:21:49.938391Z"
    },
    "papermill": {
     "duration": 0.020628,
     "end_time": "2025-03-17T23:21:49.941496",
     "exception": false,
     "start_time": "2025-03-17T23:21:49.920868",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Age</th>\n",
       "      <th>Na_to_K</th>\n",
       "      <th>Sex_F</th>\n",
       "      <th>Sex_M</th>\n",
       "      <th>BP_HIGH</th>\n",
       "      <th>BP_LOW</th>\n",
       "      <th>BP_NORMAL</th>\n",
       "      <th>Cholesterol_HIGH</th>\n",
       "      <th>Cholesterol_NORMAL</th>\n",
       "      <th>Drug</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>40</th>\n",
       "      <td>73</td>\n",
       "      <td>19.221</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>drugY</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>108</th>\n",
       "      <td>72</td>\n",
       "      <td>9.677</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>drugB</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>155</th>\n",
       "      <td>49</td>\n",
       "      <td>10.537</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>drugC</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>156</th>\n",
       "      <td>31</td>\n",
       "      <td>11.227</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>drugA</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25</th>\n",
       "      <td>28</td>\n",
       "      <td>18.809</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>drugY</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "     Age  Na_to_K  Sex_F  Sex_M  BP_HIGH  BP_LOW  BP_NORMAL  Cholesterol_HIGH  \\\n",
       "40    73   19.221      1      0        0       0          1                 1   \n",
       "108   72    9.677      0      1        1       0          0                 0   \n",
       "155   49   10.537      0      1        0       1          0                 1   \n",
       "156   31   11.227      0      1        1       0          0                 0   \n",
       "25    28   18.809      1      0        1       0          0                 0   \n",
       "\n",
       "     Cholesterol_NORMAL   Drug  \n",
       "40                    0  drugY  \n",
       "108                   1  drugB  \n",
       "155                   0  drugC  \n",
       "156                   1  drugA  \n",
       "25                    1  drugY  "
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "test.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "3bf121a4",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-03-17T23:21:49.954046Z",
     "iopub.status.busy": "2025-03-17T23:21:49.953685Z",
     "iopub.status.idle": "2025-03-17T23:21:49.966394Z",
     "shell.execute_reply": "2025-03-17T23:21:49.965077Z"
    },
    "papermill": {
     "duration": 0.021039,
     "end_time": "2025-03-17T23:21:49.968377",
     "exception": false,
     "start_time": "2025-03-17T23:21:49.947338",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Age</th>\n",
       "      <th>Na_to_K</th>\n",
       "      <th>Sex_F</th>\n",
       "      <th>Sex_M</th>\n",
       "      <th>BP_HIGH</th>\n",
       "      <th>BP_LOW</th>\n",
       "      <th>BP_NORMAL</th>\n",
       "      <th>Cholesterol_HIGH</th>\n",
       "      <th>Cholesterol_NORMAL</th>\n",
       "      <th>Drug</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>175</th>\n",
       "      <td>73</td>\n",
       "      <td>18.348</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>drugY</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>134</th>\n",
       "      <td>42</td>\n",
       "      <td>21.036</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>drugY</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>167</th>\n",
       "      <td>57</td>\n",
       "      <td>14.216</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>drugX</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>183</th>\n",
       "      <td>36</td>\n",
       "      <td>15.490</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>drugY</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>63</th>\n",
       "      <td>45</td>\n",
       "      <td>8.370</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>drugX</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "     Age  Na_to_K  Sex_F  Sex_M  BP_HIGH  BP_LOW  BP_NORMAL  Cholesterol_HIGH  \\\n",
       "175   73   18.348      1      0        1       0          0                 1   \n",
       "134   42   21.036      1      0        1       0          0                 1   \n",
       "167   57   14.216      1      0        0       0          1                 1   \n",
       "183   36   15.490      1      0        1       0          0                 0   \n",
       "63    45    8.370      0      1        0       1          0                 0   \n",
       "\n",
       "     Cholesterol_NORMAL   Drug  \n",
       "175                   0  drugY  \n",
       "134                   0  drugY  \n",
       "167                   0  drugX  \n",
       "183                   1  drugY  \n",
       "63                    1  drugX  "
      ]
     },
     "execution_count": 13,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "validation.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "f9dd732b",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-03-17T23:21:49.982091Z",
     "iopub.status.busy": "2025-03-17T23:21:49.981626Z",
     "iopub.status.idle": "2025-03-17T23:21:49.987699Z",
     "shell.execute_reply": "2025-03-17T23:21:49.986631Z"
    },
    "papermill": {
     "duration": 0.015082,
     "end_time": "2025-03-17T23:21:49.989479",
     "exception": false,
     "start_time": "2025-03-17T23:21:49.974397",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "train_x = train.drop(columns='Drug')\n",
    "train_y = train[['Drug']]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "85761ae6",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-03-17T23:21:50.002286Z",
     "iopub.status.busy": "2025-03-17T23:21:50.001879Z",
     "iopub.status.idle": "2025-03-17T23:21:50.006048Z",
     "shell.execute_reply": "2025-03-17T23:21:50.004997Z"
    },
    "papermill": {
     "duration": 0.01269,
     "end_time": "2025-03-17T23:21:50.008057",
     "exception": false,
     "start_time": "2025-03-17T23:21:49.995367",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "from sklearn.tree import DecisionTreeClassifier\n",
    "from sklearn import tree"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "f540a9e6",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-03-17T23:21:50.021482Z",
     "iopub.status.busy": "2025-03-17T23:21:50.021069Z",
     "iopub.status.idle": "2025-03-17T23:21:52.211187Z",
     "shell.execute_reply": "2025-03-17T23:21:52.209965Z"
    },
    "papermill": {
     "duration": 2.199203,
     "end_time": "2025-03-17T23:21:52.213444",
     "exception": false,
     "start_time": "2025-03-17T23:21:50.014241",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[Text(0.5384615384615384, 0.9444444444444444, 'x[4] <= 0.513\\nentropy = 2.018\\nsamples = 120\\nvalue = [17, 11, 8, 34, 50]'),\n",
       " Text(0.28846153846153844, 0.8333333333333334, 'x[8] <= 0.331\\nentropy = 1.391\\nsamples = 71\\nvalue = [0, 0, 8, 34, 29]'),\n",
       " Text(0.15384615384615385, 0.7222222222222222, 'x[5] <= 0.714\\nentropy = 1.498\\nsamples = 30\\nvalue = [0, 0, 8, 7, 15]'),\n",
       " Text(0.07692307692307693, 0.6111111111111112, 'x[1] <= 13.609\\nentropy = 0.997\\nsamples = 15\\nvalue = [0, 0, 0, 7, 8]'),\n",
       " Text(0.038461538461538464, 0.5, 'entropy = 0.0\\nsamples = 7\\nvalue = [0, 0, 0, 7, 0]'),\n",
       " Text(0.11538461538461539, 0.5, 'entropy = 0.0\\nsamples = 8\\nvalue = [0, 0, 0, 0, 8]'),\n",
       " Text(0.23076923076923078, 0.6111111111111112, 'x[1] <= 28.13\\nentropy = 0.997\\nsamples = 15\\nvalue = [0, 0, 8, 0, 7]'),\n",
       " Text(0.19230769230769232, 0.5, 'x[0] <= 30.123\\nentropy = 0.961\\nsamples = 13\\nvalue = [0, 0, 8, 0, 5]'),\n",
       " Text(0.15384615384615385, 0.3888888888888889, 'entropy = 0.0\\nsamples = 2\\nvalue = [0, 0, 2, 0, 0]'),\n",
       " Text(0.23076923076923078, 0.3888888888888889, 'x[1] <= 16.621\\nentropy = 0.994\\nsamples = 11\\nvalue = [0, 0, 6, 0, 5]'),\n",
       " Text(0.19230769230769232, 0.2777777777777778, 'x[1] <= 12.537\\nentropy = 0.592\\nsamples = 7\\nvalue = [0, 0, 6, 0, 1]'),\n",
       " Text(0.15384615384615385, 0.16666666666666666, 'entropy = 0.0\\nsamples = 6\\nvalue = [0, 0, 6, 0, 0]'),\n",
       " Text(0.23076923076923078, 0.16666666666666666, 'entropy = 0.0\\nsamples = 1\\nvalue = [0, 0, 0, 0, 1]'),\n",
       " Text(0.2692307692307692, 0.2777777777777778, 'entropy = 0.0\\nsamples = 4\\nvalue = [0, 0, 0, 0, 4]'),\n",
       " Text(0.2692307692307692, 0.5, 'entropy = 0.0\\nsamples = 2\\nvalue = [0, 0, 0, 0, 2]'),\n",
       " Text(0.4230769230769231, 0.7222222222222222, 'x[1] <= 18.081\\nentropy = 0.926\\nsamples = 41\\nvalue = [0, 0, 0, 27, 14]'),\n",
       " Text(0.38461538461538464, 0.6111111111111112, 'x[5] <= 0.568\\nentropy = 0.362\\nsamples = 29\\nvalue = [0, 0, 0, 27, 2]'),\n",
       " Text(0.34615384615384615, 0.5, 'x[1] <= 10.199\\nentropy = 0.544\\nsamples = 16\\nvalue = [0, 0, 0, 14, 2]'),\n",
       " Text(0.3076923076923077, 0.3888888888888889, 'entropy = 0.0\\nsamples = 9\\nvalue = [0, 0, 0, 9, 0]'),\n",
       " Text(0.38461538461538464, 0.3888888888888889, 'x[1] <= 17.018\\nentropy = 0.863\\nsamples = 7\\nvalue = [0, 0, 0, 5, 2]'),\n",
       " Text(0.34615384615384615, 0.2777777777777778, 'x[1] <= 14.909\\nentropy = 0.65\\nsamples = 6\\nvalue = [0, 0, 0, 5, 1]'),\n",
       " Text(0.3076923076923077, 0.16666666666666666, 'entropy = 0.0\\nsamples = 5\\nvalue = [0, 0, 0, 5, 0]'),\n",
       " Text(0.38461538461538464, 0.16666666666666666, 'entropy = 0.0\\nsamples = 1\\nvalue = [0, 0, 0, 0, 1]'),\n",
       " Text(0.4230769230769231, 0.2777777777777778, 'entropy = 0.0\\nsamples = 1\\nvalue = [0, 0, 0, 0, 1]'),\n",
       " Text(0.4230769230769231, 0.5, 'entropy = 0.0\\nsamples = 13\\nvalue = [0, 0, 0, 13, 0]'),\n",
       " Text(0.46153846153846156, 0.6111111111111112, 'entropy = 0.0\\nsamples = 12\\nvalue = [0, 0, 0, 0, 12]'),\n",
       " Text(0.7884615384615384, 0.8333333333333334, 'x[0] <= 67.154\\nentropy = 1.538\\nsamples = 49\\nvalue = [17, 11, 0, 0, 21]'),\n",
       " Text(0.6923076923076923, 0.7222222222222222, 'x[0] <= 49.852\\nentropy = 1.494\\nsamples = 45\\nvalue = [17, 8, 0, 0, 20]'),\n",
       " Text(0.6153846153846154, 0.6111111111111112, 'x[1] <= 24.643\\nentropy = 0.987\\nsamples = 30\\nvalue = [17, 0, 0, 0, 13]'),\n",
       " Text(0.5769230769230769, 0.5, 'x[1] <= 19.096\\nentropy = 0.773\\nsamples = 22\\nvalue = [17, 0, 0, 0, 5]'),\n",
       " Text(0.5384615384615384, 0.3888888888888889, 'x[1] <= 15.515\\nentropy = 0.485\\nsamples = 19\\nvalue = [17, 0, 0, 0, 2]'),\n",
       " Text(0.5, 0.2777777777777778, 'entropy = 0.0\\nsamples = 17\\nvalue = [17, 0, 0, 0, 0]'),\n",
       " Text(0.5769230769230769, 0.2777777777777778, 'entropy = 0.0\\nsamples = 2\\nvalue = [0, 0, 0, 0, 2]'),\n",
       " Text(0.6153846153846154, 0.3888888888888889, 'entropy = 0.0\\nsamples = 3\\nvalue = [0, 0, 0, 0, 3]'),\n",
       " Text(0.6538461538461539, 0.5, 'entropy = 0.0\\nsamples = 8\\nvalue = [0, 0, 0, 0, 8]'),\n",
       " Text(0.7692307692307693, 0.6111111111111112, 'x[1] <= 11.376\\nentropy = 0.997\\nsamples = 15\\nvalue = [0, 8, 0, 0, 7]'),\n",
       " Text(0.7307692307692307, 0.5, 'entropy = 0.0\\nsamples = 4\\nvalue = [0, 4, 0, 0, 0]'),\n",
       " Text(0.8076923076923077, 0.5, 'x[3] <= 0.211\\nentropy = 0.946\\nsamples = 11\\nvalue = [0, 4, 0, 0, 7]'),\n",
       " Text(0.6923076923076923, 0.3888888888888889, 'x[0] <= 53.67\\nentropy = 1.0\\nsamples = 6\\nvalue = [0, 3, 0, 0, 3]'),\n",
       " Text(0.6538461538461539, 0.2777777777777778, 'entropy = 0.0\\nsamples = 1\\nvalue = [0, 1, 0, 0, 0]'),\n",
       " Text(0.7307692307692307, 0.2777777777777778, 'x[0] <= 62.657\\nentropy = 0.971\\nsamples = 5\\nvalue = [0, 2, 0, 0, 3]'),\n",
       " Text(0.6923076923076923, 0.16666666666666666, 'x[1] <= 22.903\\nentropy = 1.0\\nsamples = 4\\nvalue = [0, 2, 0, 0, 2]'),\n",
       " Text(0.6538461538461539, 0.05555555555555555, 'entropy = 0.0\\nsamples = 2\\nvalue = [0, 2, 0, 0, 0]'),\n",
       " Text(0.7307692307692307, 0.05555555555555555, 'entropy = 0.0\\nsamples = 2\\nvalue = [0, 0, 0, 0, 2]'),\n",
       " Text(0.7692307692307693, 0.16666666666666666, 'entropy = 0.0\\nsamples = 1\\nvalue = [0, 0, 0, 0, 1]'),\n",
       " Text(0.9230769230769231, 0.3888888888888889, 'x[1] <= 18.984\\nentropy = 0.722\\nsamples = 5\\nvalue = [0, 1, 0, 0, 4]'),\n",
       " Text(0.8846153846153846, 0.2777777777777778, 'x[1] <= 14.749\\nentropy = 0.918\\nsamples = 3\\nvalue = [0, 1, 0, 0, 2]'),\n",
       " Text(0.8461538461538461, 0.16666666666666666, 'entropy = 0.0\\nsamples = 1\\nvalue = [0, 1, 0, 0, 0]'),\n",
       " Text(0.9230769230769231, 0.16666666666666666, 'entropy = 0.0\\nsamples = 2\\nvalue = [0, 0, 0, 0, 2]'),\n",
       " Text(0.9615384615384616, 0.2777777777777778, 'entropy = 0.0\\nsamples = 2\\nvalue = [0, 0, 0, 0, 2]'),\n",
       " Text(0.8846153846153846, 0.7222222222222222, 'x[8] <= 0.512\\nentropy = 0.811\\nsamples = 4\\nvalue = [0, 3, 0, 0, 1]'),\n",
       " Text(0.8461538461538461, 0.6111111111111112, 'entropy = 0.0\\nsamples = 3\\nvalue = [0, 3, 0, 0, 0]'),\n",
       " Text(0.9230769230769231, 0.6111111111111112, 'entropy = 0.0\\nsamples = 1\\nvalue = [0, 0, 0, 0, 1]')]"
      ]
     },
     "execution_count": 16,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "dtree = DecisionTreeClassifier(criterion = 'entropy',splitter = \"random\")\n",
    "des = dtree.fit(train_x,train_y)\n",
    "\n",
    "\n",
    "\n",
    "tree.plot_tree(des)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "9f64d962",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-03-17T23:21:52.228884Z",
     "iopub.status.busy": "2025-03-17T23:21:52.228482Z",
     "iopub.status.idle": "2025-03-17T23:21:52.240108Z",
     "shell.execute_reply": "2025-03-17T23:21:52.238745Z"
    },
    "papermill": {
     "duration": 0.021731,
     "end_time": "2025-03-17T23:21:52.242500",
     "exception": false,
     "start_time": "2025-03-17T23:21:52.220769",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.85"
      ]
     },
     "execution_count": 17,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "y_pred =  des.predict(validation.drop(columns='Drug'))\n",
    "from sklearn import metrics \n",
    "metrics.accuracy_score(y_pred,validation['Drug'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "4205efaa",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-03-17T23:21:52.258440Z",
     "iopub.status.busy": "2025-03-17T23:21:52.258071Z",
     "iopub.status.idle": "2025-03-17T23:21:52.267889Z",
     "shell.execute_reply": "2025-03-17T23:21:52.266782Z"
    },
    "papermill": {
     "duration": 0.019441,
     "end_time": "2025-03-17T23:21:52.269602",
     "exception": false,
     "start_time": "2025-03-17T23:21:52.250161",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.825"
      ]
     },
     "execution_count": 18,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "y_pred_test =  des.predict(test.drop(columns='Drug'))\n",
    "\n",
    "metrics.accuracy_score(y_pred_test,test['Drug'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "63a6b82d",
   "metadata": {
    "papermill": {
     "duration": 0.006711,
     "end_time": "2025-03-17T23:21:52.283457",
     "exception": false,
     "start_time": "2025-03-17T23:21:52.276746",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "699785d9",
   "metadata": {
    "papermill": {
     "duration": 0.006915,
     "end_time": "2025-03-17T23:21:52.297288",
     "exception": false,
     "start_time": "2025-03-17T23:21:52.290373",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kaggle": {
   "accelerator": "none",
   "dataSources": [
    {
     "datasetId": 1432504,
     "sourceId": 2371056,
     "sourceType": "datasetVersion"
    },
    {
     "datasetId": 6856259,
     "sourceId": 11012152,
     "sourceType": "datasetVersion"
    }
   ],
   "dockerImageVersionId": 30918,
   "isGpuEnabled": false,
   "isInternetEnabled": true,
   "language": "python",
   "sourceType": "notebook"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.12"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 9.290342,
   "end_time": "2025-03-17T23:21:53.126103",
   "environment_variables": {},
   "exception": null,
   "input_path": "__notebook__.ipynb",
   "output_path": "__notebook__.ipynb",
   "parameters": {},
   "start_time": "2025-03-17T23:21:43.835761",
   "version": "2.6.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
